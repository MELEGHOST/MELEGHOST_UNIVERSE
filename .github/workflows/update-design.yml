name: Update Design from Figma

on:
  workflow_dispatch: # Запуск вручную
  schedule:
    - cron: '0 0 * * *' # Ежедневный запуск в полночь (UTC)

jobs:
  update-design:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Настройка SSH-ключа
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "SSH key setup complete."

      # Шаг 2: Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Шаг 3: Установка Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Шаг 4: Установка зависимостей
      - name: Install dependencies
        run: npm install axios

      # Шаг 5: Создание файла скрипта для Node.js
      - name: Create Node.js script
        run: |
          cat <<EOF > export-resources.js
          const axios = require('axios');
          const fs = require('fs');

          const FIGMA_TOKEN = process.env.FIGMA_TOKEN;
          const FIGMA_FILE_ID = process.env.FIGMA_FILE_ID;

          const exportResources = async () => {
            try {
              console.log('Fetching data from Figma...');

              // Шаг 1: Получаем структуру файла
              const fileResponse = await axios.get(\`https://api.figma.com/v1/files/\${FIGMA_FILE_ID}\`, {
                headers: { 'X-Figma-Token': FIGMA_TOKEN },
              });

              console.log('Figma file structure:', JSON.stringify(fileResponse.data, null, 2));

              // Извлекаем все фреймы
              const frames = fileResponse.data.document.children.filter(child => child.type === 'CANVAS');
              console.log(\`Found \${frames.length} frames.\`);

              if (frames.length === 0) {
                throw new Error('No frames found in the Figma file.');
              }

              // Проходимся по всем фреймам
              for (let i = 0; i < frames.length; i++) {
                const frame = frames[i];
                const frameId = frame.id;
                console.log(\`Processing frame \${i + 1}: ID=\${frameId}, Name=\${frame.name}\`);

                // Шаг 2: Экспорт изображения фрейма
                const imageResponse = await axios.get(
                  \`https://api.figma.com/v1/images/\${FIGMA_FILE_ID}?ids=\${frameId}&format=png\`,
                  {
                    headers: { 'X-Figma-Token': FIGMA_TOKEN },
                  }
                );

                console.log(\`Image export response for frame \${i + 1}:\`, JSON.stringify(imageResponse.data, null, 2));

                // Проверяем, есть ли URL изображения
                if (!imageResponse.data.images || !imageResponse.data.images[frameId]) {
                  console.error(\`Image URL not found for frame \${i + 1}. Skipping...\`);
                  continue;
                }

                const imageUrl = imageResponse.data.images[frameId];
                console.log(\`Downloading image for frame \${i + 1} from: \${imageUrl}\`);

                // Шаг 3: Скачиваем изображение
                const imageDownload = await axios({
                  url: imageUrl,
                  responseType: 'arraybuffer',
                });

                // Сохраняем изображение в файл
                const fileName = \`frame-\${i + 1}-\${frame.name.replace(/\s+/g, '-').toLowerCase()}.png\`;
                fs.writeFileSync(fileName, imageDownload.data);
                console.log(\`Image saved as \${fileName}.\`);
              }
            } catch (error) {
              console.error('Error exporting resources:', error.message);
              process.exit(1); // Завершаем выполнение с ошибкой
            }
          };

          exportResources();
          EOF

      # Шаг 6: Выполнение Node.js скрипта
      - name: Run Node.js script
        env:
          FIGMA_TOKEN: ${{ secrets.FIGMA_TOKEN }}
          FIGMA_FILE_ID: ${{ secrets.FIGMA_FILE_ID }}
        run: node export-resources.js

      # Шаг 7: Коммит изменений
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin git@github.com:MELEGHOST/MELEGHOST_UNIVERSE.git
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Automated update from Figma"
            git push origin main
          fi
