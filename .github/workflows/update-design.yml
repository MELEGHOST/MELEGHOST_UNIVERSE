name: Update Mini App Design from Figma

on:
  schedule:
    - cron: '*/5 * * * *' # Запуск каждые 5 минут
  workflow_dispatch: # Возможность запуска вручную

jobs:
  update-design:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Настройка SSH-ключа
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "SSH key setup complete."

      # Шаг 2: Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Шаг 3: Установка Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Шаг 4: Установка зависимостей
      - name: Install dependencies
        run: npm install axios

      # Шаг 5: Создание файла скрипта для Node.js
      - name: Create Node.js script
        run: |
          cat <<EOF > scripts/export-resources.js
          const axios = require('axios');
          const fs = require('fs');

          const FIGMA_TOKEN = process.env.FIGMA_TOKEN;
          const FIGMA_FILE_ID = process.env.FIGMA_FILE_ID;

          const exportResources = async () => {
            try {
              console.log('Fetching data from Figma...');

              // Шаг 1: Получаем структуру файла
              const fileResponse = await axios.get(\`https://api.figma.com/v1/files/\${FIGMA_FILE_ID}\`, {
                headers: { 'X-Figma-Token': FIGMA_TOKEN },
              });

              console.log('Figma file loaded successfully.');
              console.log(\`File name: \${fileResponse.data.name}\`);
              console.log(\`Last modified: \${fileResponse.data.lastModified}\`);

              // Извлекаем все страницы
              const pages = fileResponse.data.document.children.filter(child => child.type === 'CANVAS');
              console.log(\`Found \${pages.length} pages.\`);

              if (pages.length === 0) {
                throw new Error('No pages found in the Figma file.');
              }

              let frameCount = 0; // Счётчик фреймов

              // Проходимся по всем страницам
              for (const page of pages) {
                console.log(\`Processing page: \${page.name}\`);

                // Извлекаем все фреймы на странице
                const frames = page.children.filter(child => child.type === 'FRAME');
                console.log(\`Found \${frames.length} frames on page \${page.name}.\`);

                if (frames.length === 0) {
                  console.log(\`No frames found on page \${page.name}. Skipping...\`);
                  continue;
                }

                // Проходимся по всем фреймам
                for (const frame of frames) {
                  frameCount++;
                  const frameId = frame.id;
                  console.log(\`Processing frame \${frameCount}: ID=\${frameId}, Name=\${frame.name}\`);

                  // Шаг 2: Экспорт изображения фрейма
                  const imageResponse = await axios.get(
                    \`https://api.figma.com/v1/images/\${FIGMA_FILE_ID}?ids=\${frameId}&format=png\`,
                    {
                      headers: { 'X-Figma-Token': FIGMA_TOKEN },
                    }
                  );

                  // Проверяем, есть ли URL изображения
                  if (!imageResponse.data.images || !imageResponse.data.images[frameId]) {
                    console.error(\`Image URL not found for frame \${frameCount}. Skipping...\`);
                    continue;
                  }

                  const imageUrl = imageResponse.data.images[frameId];
                  console.log(\`Downloading image for frame \${frameCount} from: \${imageUrl}\`);

                  // Шаг 3: Скачиваем изображение
                  const imageDownload = await axios({
                    url: imageUrl,
                    responseType: 'arraybuffer',
                  });

                  // Сохраняем изображение в файл
                  const fileName = \`assets/frames/frame-\${frameCount}-\${frame.name.replace(/\s+/g, '-').toLowerCase()}.png\`;
                  fs.writeFileSync(fileName, imageDownload.data);
                  console.log(\`Image saved as \${fileName}.\`);
                }
              }

              if (frameCount === 0) {
                throw new Error('No frames found in the Figma file.');
              }
            } catch (error) {
              console.error('Error exporting resources:', error.message);
              process.exit(1); // Завершаем выполнение с ошибкой
            }
          };

          exportResources();
          EOF

      # Шаг 6: Выполнение Node.js скрипта
      - name: Run Node.js script
        env:
          FIGMA_TOKEN: ${{ secrets.FIGMA_TOKEN }}
          FIGMA_FILE_ID: ${{ secrets.FIGMA_FILE_ID }}
        run: node scripts/export-resources.js

      # Шаг 7: Обновление версии
      - name: Update version
        id: update_version
        run: |
          # Читаем текущую версию из файла .version
          VERSION=$(cat .version)
          echo "Current version: $VERSION"

          # Разделяем версию на части
          MAJOR=$(echo $VERSION | cut -d '.' -f 1)
          MINOR=$(echo $VERSION | cut -d '.' -f 2)
          PATCH=$(echo $VERSION | cut -d '.' -f 3)

          # Увеличиваем PATCH на 1
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          # Записываем новую версию в файл .version
          echo "$NEW_VERSION" > .version
          echo "New version: $NEW_VERSION"

          # Выводим новую версию для использования в следующих шагах
          echo "version=$NEW_VERSION" >> $GITHUB_ENV

      # Шаг 8: Настройка данных автора для Git
      - name: Configure Git user
        run: |
          git config --global user.name "MELEGHOST"
          git config --global user.email "actions@github.com"

      # Шаг 9: Обновление CHANGELOG.md
      - name: Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ env.version }}"
          echo "Current version: $NEW_VERSION"

          # Добавляем новую запись в CHANGELOG.md
          echo "## [$NEW_VERSION] - $(date +'%Y-%m-%d')" >> CHANGELOG.md
          echo "- Updated frames from Figma." >> CHANGELOG.md
          echo "- Fixed any issues with image paths." >> CHANGELOG.md

          # Коммит изменений
          git add CHANGELOG.md .version
          git commit -m "Update version to $NEW_VERSION and CHANGELOG.md"
          git push origin main

         # Шаг 10: Удаление старых ранов workflow
      - name: Delete old workflow runs
        run: |
          # Получаем все раны текущего workflow
          RUNS=$(gh api repos/MELEGHOST/MELEGHOST_UNIVERSE/actions/runs \
            --paginate \
            --jq '.workflow_runs[] | select(.created_at < (now - 21600 | strftime("%Y-%m-%dT%H:%M:%SZ"))) | .id')

          # Удаляем старые раны
          for RUN_ID in $RUNS; do
            echo "Deleting workflow run $RUN_ID"
            gh api repos/MELEGHOST/MELEGHOST_UNIVERSE/actions/runs/$RUN_ID -X DELETE || echo "Run $RUN_ID not found or already deleted."
          done
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

                # Шаг 11: Установка GitHub CLI
      - name: Install GitHub CLI
        run: |
          sudo apt-get update && sudo apt-get install -y gh
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
